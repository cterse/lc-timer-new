!function(t){var e={};function o(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)o.d(r,n,function(e){return t[e]}.bind(null,n));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);var r=function(){function t(){}return t.STORAGE_PROBLEM_COLLECTION="problem_collection_obj",t.PROBLEM_TITLE_SELECTOR="div[data-cy=question-title]",t.SUBMIT_BUTTON_SELECTOR="button[data-cy=submit-code-btn]",t.SUBMISSION_SUCCESS_DIV_CLASS_SELECTOR=".success__3Ai7",t.PROBLEM_STATUS_ACTIVE="active",t.PROBLEM_STATUS_COMPLETE="complete",t.PROBLEM_STATUS_CREATED="created",t.SESSION_STATUS_ACTIVE="active",t.SESSION_STATUS_COMPLETE="complete",t.SESSION_STATUS_CREATED="created",t}(),n=function(){function t(t){var e;this.activeProblemCount=0,this.completeProblemCount=0,this.totalProblemCount=0,this.problemCollectionObject=null!==(e=null==t?void 0:t[r.STORAGE_PROBLEM_COLLECTION])&&void 0!==e?e:{},this.updateProblemCount()}return t.prototype.getProblem=function(t){return JSON.parse(this.problemCollectionObject[t])},t.prototype.addProblem=function(t){return this.problemCollectionObject[t.code]=JSON.stringify(t),this.updateProblemCount(),t},t.prototype.removeProblem=function(t){var e=this.problemCollectionObject[t];return delete this.problemCollectionObject[t],this.updateProblemCount(),JSON.parse(e)},t.prototype.updateProblemCount=function(){var t=0,e=0,o=0;for(var n in this.problemCollectionObject)if(this.problemCollectionObject.hasOwnProperty(n)){var i=JSON.parse(this.problemCollectionObject[n]);i.getStatus()===r.PROBLEM_STATUS_ACTIVE&&t++,i.getStatus()===r.PROBLEM_STATUS_COMPLETE&&e++,o++}this.activeProblemCount=t,this.completeProblemCount=e,this.totalProblemCount=o},t.prototype.getActiveProblemCount=function(){return this.activeProblemCount},t.prototype.getCompleteProblemCount=function(){return this.completeProblemCount},t.prototype.getTotalProblemCount=function(){return this.totalProblemCount},t}(),i=function(){function t(t){this.id=t,this.status=r.SESSION_STATUS_CREATED}return t.prototype.setStatus=function(){return this.endTimestamp?r.SESSION_STATUS_COMPLETE:this.initTimestamp?r.SESSION_STATUS_ACTIVE:r.SESSION_STATUS_CREATED},t.prototype.start=function(t){if(void 0===t&&(t=Date.now()),this.status!==r.SESSION_STATUS_CREATED)throw new Error("Attempt to start a "+this.status+" session");return this.initTimestamp=t,this.status=r.SESSION_STATUS_ACTIVE,this},t}(),s=function(){function t(t,e,o,r){void 0===r&&(r=[]),this.code=t,this.name=e,this.url=o,this.sessionsList=r}return t.prototype.start=function(t){if(void 0===t&&(t=Date.now()),this.getStatus()!==r.PROBLEM_STATUS_CREATED)throw new Error("Attempt to start a "+this.getStatus()+" problem");return this.startNewSession(t)},t.prototype.startNewSession=function(t){void 0===t&&(t=Date.now());var e=new i(this.getNewSessionId()).start(t);return this.addSession(e)},t.prototype.getNewSessionId=function(){return this.code+"-"+(this.sessionsList.length+1).toString()},t.prototype.addSession=function(t){return this.sessionsList.push(t),this},t.prototype.getStatus=function(){var t,e;return null!==(e=null===(t=this.getLatestSession())||void 0===t?void 0:t.status)&&void 0!==e?e:r.PROBLEM_STATUS_CREATED},t.prototype.getLatestSession=function(){return this.sessionsList[this.sessionsList.length-1]},t.prototype.isComplete=function(){return this.getStatus()===r.PROBLEM_STATUS_COMPLETE},t.prototype.isActive=function(){return this.getStatus()===r.PROBLEM_STATUS_ACTIVE},t}(),u=function(){function t(){}return t.prototype.extractProblemCode=function(){return Number($(r.PROBLEM_TITLE_SELECTOR).text().split(".")[0].trim())},t.prototype.extractProblemName=function(){return $(r.PROBLEM_TITLE_SELECTOR).text().split(".")[1].trim()},t.prototype.extractProblemUrl=function(){return new URL(location.href)},t.prototype.createProblemFromContext=function(){return new s(this.extractProblemCode(),this.extractProblemName(),this.extractProblemUrl(),[])},t}(),l=setInterval((function(){$(r.PROBLEM_TITLE_SELECTOR).length&&(clearInterval(l),chrome.storage.sync.get([r.STORAGE_PROBLEM_COLLECTION],(function(t){var e;if(!t)return console.error("lc-timer-new:problem-content : Error getting result from sync."),null;var o=new u,i=new n(t),s=o.extractProblemCode(),l=!1,c=Date.now();if(i.getProblem(s)){(null==(a=i.getProblem(s))?void 0:a.isComplete())?(console.debug("lc-timer:problem-content : Completed problem exists, starting a new session."),a.startNewSession(c),l=!0):console.debug("lc-timer:problem=content : Problem already active.")}else{console.debug("lc-timer-new:problem-content : Problem does not exist in storage, adding it.");var a=o.createProblemFromContext().start(c);i.addProblem(a),l=!0}l&&chrome.storage.sync.set(((e={})[r.STORAGE_PROBLEM_COLLECTION]=i,e),(function(){console.debug("lc-timer:problem-content : set data to storage."),console.dir(i)}))})))}),100)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,